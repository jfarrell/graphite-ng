#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'graphiteng_types'

module GraphiteNG
  class Client
    include ::Thrift::Client

    def render()
      send_render()
      return recv_render()
    end

    def send_render()
      send_message('render', Render_args)
    end

    def recv_render()
      result = receive_message(Render_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'render failed: unknown result')
    end

    def metrics()
      send_metrics()
      return recv_metrics()
    end

    def send_metrics()
      send_message('metrics', Metrics_args)
    end

    def recv_metrics()
      result = receive_message(Metrics_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'metrics failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_render(seqid, iprot, oprot)
      args = read_args(iprot, Render_args)
      result = Render_result.new()
      result.success = @handler.render()
      write_result(result, oprot, 'render', seqid)
    end

    def process_metrics(seqid, iprot, oprot)
      args = read_args(iprot, Metrics_args)
      result = Metrics_result.new()
      result.success = @handler.metrics()
      write_result(result, oprot, 'metrics', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Render_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Render_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RenderData}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Metrics_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Metrics_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

